# CoCo-MD workflow definition file
workflow:
    #dryrun: True
    stages:
        - stage1
        - stage2
    inputfiles:
       - start_coordinates
       - target_coordinates_list 
       - topfile 
       - md_input_1 
       - md_input_2 
       - md_input_3 
    outputfiles:
       - trajectories
       - cocolog

# Stage 1: the preloop
stage1:
    steps:
        - ix1

# Stage 2: the main loop
stage2:
    steps:
        - ambermd
        - i12
        - ambermd
        - i23
        - ambermd
        - i34
        - coco
        - i41
    iterations: ncycles

# Interface kernel for preloop
ix1:
    type: interfacekernel
    configuration:
        - stage              ?= 0
        - cycle              ?= 0
        - input_file         == md_input_1
        - repid              ]= repids
        - target_coordinates ]= target_coordinates_list
        - end_coordinates    $= {system_name}_{cycle}_{repid}_{stage}.rst
        - trajectory         $= {system_name}_{cycle}_{repid}.nc

# Generic amber MD kernel
ambermd:
    type: subprocesskernel
    configuration: >
        {md_exe} -O -c {start_coordinates}
        -p {topfile}
        -i {input_file}
        -r {end_coordinates}
        -ref {target_coordinates}
        -x {trajectory}
    inputfiles:
        - start_coordinates
        - topfile
        - input_file
        - target_coordinates
    outputfiles:
        - end_coordinates
        - trajectory

# Interface kernel between 1st and 2nd MD runs
i12:
    type: interfacekernel
    configuration:
        - stage             ?= {stage} + 1
        - input_file        == md_input_2
        - start_coordinates == end_coordinates
        - end_coordinates   $= {system_name}_{cycle}_{repid}_{stage}.rst

# Interface kernel between 2nd and 3rd MD runs
i23:
    type: interfacekernel
    configuration:
        - stage              ?= {stage} + 1
        - input_file         == md_input_3
        - start_coordinates  == end_coordinates
        - end_coordinates    $= {system_name}_{cycle}_{repid}_{stage}.rst
        - trajectory         $= {system_name}_{cycle}_{repid}.nc
        - target_coordinates $= {system_name}_{cycle}_{repid}.rst7

# Interface kernel between 3rd MD run and CoCo step
i34:
    type: interfacekernel
    configuration:
       - target_coordinates_list [= target_coordinates
       - repids                  [= repid
       - trajectories            += trajectory
       - cocolog                 $= coco_{cycle}.log

# CoCo kernel
coco:
    type: subprocesskernel
    configuration: >
        {coco_exe} --dims {ndims} --grid {grid_size}
        -t {topfile}
        -s {selection}
        -o {target_coordinates_list}
        -i {trajectories}
        -l {cocolog}
    inputfiles:
        - topfile
        - trajectories
    outputfiles:
        - target_coordinates_list
        - cocolog

# Interface between CoCo step and 1st MD step of next cycle
i41:
    type: interfacekernel
    configuration:
        - stage              ?= 0
        - cycle              ?= {cycle} + 1
        - input_file         == md_input_1
        - target_coordinates ]= target_coordinates_list
        - repid              ]= repids
        - end_coordinates    $= {system_name}_{cycle}_{repid}_{stage}.rst

# Checklist of required inputs: this section is optional but aids debugging
inputs:
   - system_name # A name used to tag output files produced by the workflow
   - md_exe # The name of the md executable - can also include 'mpirun' etc.
   - start_coordinates # The 'good' coordinates used to start targetted MD steps
   - target_coordinates_list # A list of coordinates used as targets first round
   - repids # A list of the IDs for each replicate
   - topfile # The topology file
   - md_input_1 # Input file for MD step 1 (restrained/targetted MD)
   - md_input_2 # Input file for MD step 2 (restrained/targetted MD)
   - md_input_3 # Input file for MD step 3 (production MD)
   - coco_exe # The pyCoCo executable, may include flags such as '-v'
   - grid_size # Grid size parameter for pyCoCo
   - ndims # Dimensions parameter for pyCoCo
   - selection # Atoms selected for pyCoCo analysis in MDTraj DSL
   - ncycles # Number of cycles of the workflow
