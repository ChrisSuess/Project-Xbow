#!/usr/bin/env python
from __future__ import print_function

import xbow
from xbow.instances import find_username
import boto3
import subprocess
import os, yaml
import sys

cfg_file = os.path.join(xbow.XBOW_CONFIGDIR, "settings.yml")

with open(cfg_file, 'r') as ymlfile:
    cfg = yaml.load(ymlfile)

def exec_on_instance(command, name=None, instance_id=None, region=None):
    """
    Execute command on the instance
    """
    if name is None and instance_id is None:
        raise ValueError('Error - either the name or instance_id must be provided')

    ec2 = boto3.resource('ec2', region_name=region)
    if name is not None:
        instances = list(ec2.instances.filter(Filters=[{'Name': 'key-name', 'Values': [name]}, {'Name': 'instance-state-name', 'Values': ['running']}]))
    else:
        instances = list(ec2.instances.filter(InstanceIds=[instance_id]))

    if len(instances) == 0:
        raise ValueError('Error - no such instance')
    elif len(instances) > 1:
        raise ValueError('Error - more than one instance has that name')
    else:
        instance = instances[0]
        name = instance.key_name
        username = find_username(instance)
        if username is None:
            raise RuntimeError('Error: cannot determine username of instance')

        cwd = os.getcwd()
        base = os.path.basename(cwd)
        pem_file = '{}/{}.pem'.format(xbow.XBOW_CONFIGDIR, name)
        #cmd_change = 'export PS1="\[\e[34;1m\]\u\[\e[0m\]@\[\e[32;1m\]xbow\[\e[0m\]:\w> "'

        launch_command = "ssh -i {} {}@{} -oStrictHostKeyChecking=no '{}'".format(pem_file, username, instance.public_dns_name, command)
        #print(launch_command)
        subprocess.call(launch_command, shell=True)
     

command = ' '.join(sys.argv[1:])
try:
    result = exec_on_instance(command, name=cfg['scheduler_name'])
except ValueError as e:
    print(e)
